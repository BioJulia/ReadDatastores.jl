var documenterSearchIndex = {"docs":
[{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"CurrentModule = ReadDatastores\nDocTestSetup = quote\n    using ReadDatastores\nend","category":"page"},{"location":"build-datastores/#Building-Read-Datastores-1","page":"Building & loading datastores","title":"Building Read Datastores","text":"","category":"section"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"To build a read datastore you first need to decide what sort of read data you have.","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"If you have short (somewhat regular in length) paired reads such as that were sequenced from a paired-end library or a long mate pair library, you should build a PairedReads datastore.","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"If you have long reads of inconsistent length, such as you would get from single-molecule real-time sequencing of a long read library, you should build a LongReads datastore.","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"If you have short (somewhat regular in length) paired reads, and thr pairs are linked linked through some proximity tagging mechanism (like 10x), then you should build a LinkedReads datastore.","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"The process of building these datastores is consistent, but for each datastore there are datastore specific options the constructor will accept:","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"PairedReads\nLongReads\nLinkedReads","category":"page"},{"location":"build-datastores/#ReadDatastores.PairedReads","page":"Building & loading datastores","title":"ReadDatastores.PairedReads","text":"PairedReads(rdrx::FASTQ.Reader, rdry::FASTQ.Reader, outfile::String, name::String, minsize::Integer, maxsize::Integer, fragsize::Integer, orientation::PairedReadOrientation)\n\nConstruct a Paired Read Datastore from a pair of FASTQ file readers.\n\nPaired-end sequencing reads typically come in the form of two FASTQ files, often named according to a convention *_R1.fastq and *_R2.fastq. One file contains all the \"left\" sequences of each pair, and the other contains all the \"right\" sequences of each pair. The first read pair is made of the first record in each file.\n\nArguments\n\nrdrx::FASTQ.Reader: The reader of the *_R1.fastq file.\nrdxy::FASTQ.Reader: The reader of the *_R2.fastq file.\noutfile::String: A prefix for the datastore's filename, the full filename will include a \".prseq\" extension, which will be added automatically.\nname::String: A string denoting a default name for your datastore. Naming datastores is useful for downstream applications.\nminsize::Integer: A minimum read length (in base pairs). When building the datastore, if any pair of reads has one or both reads shorter than this cutoff, then the pair will be discarded.\nmaxsize::Integer: A maximum read length (in base pairs). When building the datastore, if any read has a greater length, it will be resized to this maximum length and added to the datastore.\nfragsize::Integer: The average fragment length of the paired end library that was sequenced. This value is entirely optional, but may be important for downstream applications.\norientation::PairedReadOrientation: The orientation of the reads. Set it to FwRv for building a datastore from a sequenced paired end library, and set it to RvFw if you are building the datastore from reads sequenced from a long mate pair library.\n\nExamples\n\njulia> using FASTX, ReadDatastores\n\njulia> fwq = open(FASTQ.Reader, \"test/ecoli_tester_R1.fastq\")\nFASTX.FASTQ.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(BioGenerics.Automa.State{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}(<mode=idle>), 1, 1, false), nothing)\n\njulia> rvq = open(FASTQ.Reader, \"test/ecoli_tester_R2.fastq\")\nFASTX.FASTQ.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(BioGenerics.Automa.State{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}(<mode=idle>), 1, 1, false), nothing)\n\njulia> ds = PairedReads(fwq, rvq, \"ecoli-test-paired\", \"my-ecoli-test\", 250, 300, 0, FwRv)\n[ Info: Building paired read datastore from FASTQ files\n[ Info: Writing paired reads to datastore\n[ Info: Done writing paired read sequences to datastore\n[ Info: 0 read pairs were discarded due to a too short sequence\n[ Info: 14 reads were truncated to 300 base pairs\n[ Info: Created paired sequence datastore with 10 sequence pairs\nPaired Read Datastore 'my-ecoli-test': 20 reads (10 pairs)\n\n\n\n\n\n\n","category":"type"},{"location":"build-datastores/#ReadDatastores.LongReads","page":"Building & loading datastores","title":"ReadDatastores.LongReads","text":"LongReads(rdr::FASTQ.Reader, outfile::String, name::String, min_size::Integer)\n\nConstruct a Long Read Datastore from a FASTQ file reader.\n\nArguments\n\nrdr::FASTQ.Reader: The reader of the fastq formatted file.\noutfile::String: A prefix for the datastore's filename, the full filename will include a \".loseq\" extension, which will be added automatically.\nname::String: A string denoting a default name for your datastore. Naming datastores is useful for downstream applications.\nmin_size::Integer: A minimum read length (in base pairs). When building the datastore, if any read sequence is shorter than this cutoff, then the read will be discarded.\n\nExamples\n\njulia> using FASTX, ReadDatastores\n\njulia> longrdr = open(FASTQ.Reader, \"test/human_nanopore_tester_2D.fastq\")\nFASTX.FASTQ.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(BioGenerics.Automa.State{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}(<mode=idle>), 1, 1, false), nothing)\n\njulia> ds = LongReads(longrdr, \"human-nanopore-tester\", \"nanopore-test\", 0)\n[ Info: Building long read datastore from FASTQ file\n[ Info: Writing long reads to datastore\n[ Info: Done writing paired read sequences to datastore\n[ Info: 0 reads were discarded due to a too short sequence\n[ Info: Writing index to datastore\n[ Info: Built long read datastore with 10 reads\nLong Read Datastore 'nanopore-test': 10 reads\n\n\n\n\n\n\n","category":"type"},{"location":"build-datastores/#ReadDatastores.LinkedReads","page":"Building & loading datastores","title":"ReadDatastores.LinkedReads","text":"LinkedReads(fwq::FASTQ.Reader, rvq::FASTQ.Reader, outfile::String, name::String, format::LinkedReadsFormat, readsize::Integer, chunksize::Int = 1000000)\n\nConstruct a Linked Read Datastore from a pair of FASTQ file readers.\n\nPaired sequencing reads typically come in the form of two FASTQ files, often named according to a convention *_R1.fastq and *_R2.fastq. One file contains all the \"left\" sequences of each pair, and the other contains all the \"right\" sequences of each pair. The first read pair is made of the first record in each file.\n\nArguments\n\nrdrx::FASTQ.Reader: The reader of the *_R1.fastq file.\nrdxy::FASTQ.Reader: The reader of the *_R2.fastq file.\noutfile::String: A prefix for the datastore's filename, the full filename will include a \".prseq\" extension, which will be added automatically.\nname::String: A string denoting a default name for your datastore. Naming datastores is useful for downstream applications.\nformat::LinkedReadsFormat: Specify the linked reads format of your fastq files. If you have plain 10x files, set format to Raw10x. If you have 10x reads output in the UCDavis format, set the format to UCDavis10x.\nchunksize::Int = 1000000: How many read pairs to process per disk batch during the tag sorting step of construction.\n\nExamples\n\njulia> using FASTX, ReadDatastores\n\njulia> fqa = open(FASTQ.Reader, \"test/10x_tester_R1.fastq\")\nFASTX.FASTQ.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(BioGenerics.Automa.State{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}(<mode=idle>), 1, 1, false), nothing)\n\njulia> fqb = open(FASTQ.Reader, \"test/10x_tester_R2.fastq\")\nFASTX.FASTQ.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(BioGenerics.Automa.State{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}}(TranscodingStreams.TranscodingStream{TranscodingStreams.Noop,IOStream}(<mode=idle>), 1, 1, false), nothing)\n\njulia> ds = LinkedReads(fqa, fqb, \"10xtest\", \"ucdavis-test\", UCDavis10x, 250)\n[ Info: Building tag sorted chunks of 1000000 pairs\n[ Info: Dumping 83 tag-sorted read pairs to chunk 0\n[ Info: Dumped\n[ Info: Processed 83 read pairs so far\n[ Info: Finished building tag sorted chunks\n[ Info: Performing merge from disk\n[ Info: Leaving space for 83 read_tag entries\n[ Info: Chunk 1 is finished\n[ Info: Finished merge from disk\n[ Info: Writing down 83 read tag entries\n[ Info: Created linked sequence datastore with 83 sequence pairs\nLinked Read Datastore 'ucdavis-test': 166 reads (83 pairs)\n\n\n\n\n\n\n","category":"type"},{"location":"build-datastores/#Loading-Read-Datastores-1","page":"Building & loading datastores","title":"Loading Read Datastores","text":"","category":"section"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"Once you have built a datastore, you can open it in other projects again using a Base.open method:","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"julia> ds = open(PairedReads, \"test/ecoli-pe.prseq\", \"my-ecoli-pe\")\nPaired Read Datastore 'my-ecoli-pe': 20 reads (10 pairs)","category":"page"},{"location":"build-datastores/#","page":"Building & loading datastores","title":"Building & loading datastores","text":"The open method takes a ReadDatastore type, the filename of the datastore, and, optionally a name for the datastore, which may be omitted, in which case the datastore will use the default name that was specified on construction. ","category":"page"},{"location":"#ReadDatastores-1","page":"Home","title":"ReadDatastores","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Latest Release) (Image: MIT license)  (Image: Stable documentation) (Image: Latest documentation) (Image: Lifecycle) (Image: Chat)","category":"page"},{"location":"#Description-1","page":"Home","title":"Description","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Not your papa's FASTQ files.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ReadDatastores provides a set of datastore types for storing and randomly accessing sequences from read datasets from disk. Each datastore type is optimised to the type of read data stored.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Using these data-stores grants greater performance than using text files that store reads (see FASTX.jl, XAM.jl, etc.) since the sequences are stored in BioSequences.jl succinct bit encodings already, and preset formats/layouts of the binary files means no need to constantly validate the input.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A paired read datastore is provided for paired-end reads and long mate-pairs (Illumina MiSeq etc).\nA long read datastore is provided for long-reads (Nanopore, PacBio etc.)\nA linked read datastore is provided for shorter reads that are linked or grouped using some additional (typically proximity based) tag (10x).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Also included is the ability to buffer these datastores, sacrificing some RAM, for faster iteration / sequential access of the reads in the datastore. ","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"ReadDatastores is made available to install through BioJulia's package registry.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Julia by default only watches the \"General\" package registry, so before you start, you should add the BioJulia package registry.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Start a julia terminal, hit the ] key to enter pkg mode (you should see the prompt change from julia> to pkg> ), then enter the following command:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"registry add https://github.com/BioJulia/BioJuliaRegistry.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"After you've added the registry, you can install ReadDatastores from the julia REPL. Press ] to enter pkg mode again, and enter the following:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"add ReadDatastores","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.","category":"page"},{"location":"#Testing-1","page":"Home","title":"Testing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"ReadDatastores is tested against Julia 1.X on Linux, OS X, and Windows.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"#Contributing-1","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Take a look at the contributing files detailed contributor and maintainer guidelines, and code of conduct.","category":"page"},{"location":"#Financial-contributions-1","page":"Home","title":"Financial contributions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We also welcome financial contributions in full transparency on our open collective. Anyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.","category":"page"},{"location":"#Backers-and-Sponsors-1","page":"Home","title":"Backers & Sponsors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Thank you to all our backers and sponsors!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Love our work and community? Become a backer.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: backers)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Does your company use BioJulia? Help keep BioJulia feature rich and healthy by sponsoring the project Your logo will show up here with a link to your website.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Questions?-1","page":"Home","title":"Questions?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you have a question about contributing or using BioJulia software, come on over and chat to us on Gitter, or you can try the Bio category of the Julia discourse site.","category":"page"}]
}
